import { Piece } from "../types";

export const PIECE_VALUES: Record<Piece, number> = {
    'K': 6000, 'k': 6000,
    'A': 120,  'a': 120,
    'E': 120,  'e': 120,
    'H': 270,  'h': 270,
    'R': 600,  'r': 600,
    'C': 285,  'c': 285,
    'P': 30,   'p': 30
  };


// The position bonus table is used to evaluate the position of a piece on the board.
// The table is center column symmetric, and the y-axis is the rank of the piece.
// The table is from the black's perspective. (Top is black's side, bottom is red's side)
// To get the position bonus for a red piece, use the black table with y = 9 - y and negate the value.
// See `getPositionBonus` in `evaluation.ts` for the implementation.
export const POSITION_BONUS = {
  p: [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 4, 6, 6, 6, 6, 6, 4, 2],
    [6, 8, 10, 12, 12, 12, 10, 8, 6],
    [10, 12, 14, 16, 16, 16, 14, 12, 10],
    [14, 16, 18, 20, 20, 20, 18, 16, 14],
    [18, 20, 22, 24, 24, 24, 22, 20, 18],
    [22, 24, 26, 28, 28, 28, 26, 24, 22],
    [26, 28, 30, 32, 32, 32, 30, 28, 26],
  ],
  c: [
    [6, 8, 10, 12, 14, 12, 10, 8, 6],
    [8, 22, 24, 26, 28, 26, 24, 22, 8],
    [10, 24, 26, 28, 30, 28, 26, 24, 10],
    [12, 26, 28, 30, 32, 30, 28, 26, 12],
    [14, 28, 30, 32, 34, 32, 30, 28, 14],
    [12, 26, 28, 30, 32, 30, 28, 26, 12],
    [10, 24, 26, 28, 30, 28, 26, 24, 10],
    [8, 22, 24, 26, 28, 26, 24, 22, 8],
    [6, 8, 10, 12, 14, 12, 10, 8, 6],
    [4, 6, 8, 10, 12, 10, 8, 6, 4],
  ],
  r: [
    [14, 14, 12, 18, 16, 18, 12, 14, 14],
    [16, 20, 18, 24, 26, 24, 18, 20, 16],
    [12, 12, 12, 18, 18, 18, 12, 12, 12],
    [12, 18, 16, 22, 22, 22, 16, 18, 12],
    [12, 14, 12, 18, 18, 18, 12, 14, 12],
    [12, 16, 14, 20, 20, 20, 14, 16, 12],
    [6, 10, 8, 14, 14, 14, 8, 10, 6],
    [4, 8, 6, 14, 12, 14, 6, 8, 4],
    [8, 4, 8, 16, 8, 16, 8, 4, 8],
    [6, 8, 6, 14, 12, 14, 6, 8, 6],
  ],
  h: [
    [4, 8, 16, 12, 4, 12, 16, 8, 4],
    [4, 10, 28, 16, 8, 16, 28, 10, 4],
    [12, 14, 16, 20, 18, 20, 16, 14, 12],
    [8, 24, 18, 24, 20, 24, 18, 24, 8],
    [6, 16, 14, 18, 16, 18, 14, 16, 6],
    [4, 12, 16, 14, 12, 14, 16, 12, 4],
    [2, 6, 8, 6, 10, 6, 8, 6, 2],
    [4, 2, 8, 8, 4, 8, 8, 2, 4],
    [0, 2, 4, 4, -2, 4, 4, 2, 0],
    [0, -4, 0, 0, 0, 0, 0, -4, 0],
  ],
  e: [
    [0, 0, 20, 0, 0, 0, 20, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [18, 0, 0, 0, 23, 0, 0, 0, 18],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 20, 0, 0, 0, 20, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
  ],
  a: [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 20, 0, 20, 0, 0, 0],
    [0, 0, 0, 0, 23, 0, 0, 0, 0],
    [0, 0, 0, 20, 0, 20, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
  ],
  k: [
    [0, 0, 0, 20, 20, 20, 0, 0, 0],
    [0, 0, 0, 25, 25, 25, 0, 0, 0],
    [0, 0, 0, 20, 20, 20, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
  ],
};
